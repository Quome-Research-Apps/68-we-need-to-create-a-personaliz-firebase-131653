// This file is generated by Firebase Genkit.
'use server';

/**
 * @fileOverview A flow that generates a personalized message to an elected official.
 *
 * - generateContactMessage - A function that generates the message.
 * - GenerateContactMessageInput - The input type for the generateContactMessage function.
 * - GenerateContactMessageOutput - The return type for the generateContactMessage function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GenerateContactMessageInputSchema = z.object({
  officialName: z.string().describe('The name of the elected official.'),
  officialDetails: z.string().describe('Details about the elected official, such as their party, roles, and committees.'),
  issue: z.string().describe('The issue the user wants to address.'),
  viewpoint: z.string().describe('The user\'s viewpoint, values, and opinions on the issue.'),
});
export type GenerateContactMessageInput = z.infer<
  typeof GenerateContactMessageInputSchema
>;

const GenerateContactMessageOutputSchema = z.object({
  message: z.string().describe('The personalized message to the elected official.'),
});
export type GenerateContactMessageOutput = z.infer<
  typeof GenerateContactMessageOutputSchema
>;

export async function generateContactMessage(
  input: GenerateContactMessageInput
): Promise<GenerateContactMessageOutput> {
  return generateContactMessageFlow(input);
}

const prompt = ai.definePrompt({
  name: 'generateContactMessagePrompt',
  input: {schema: GenerateContactMessageInputSchema},
  output: {schema: GenerateContactMessageOutputSchema},
  prompt: `You are an AI assistant designed to help concerned citizens draft personalized messages to their elected officials.

  Given the following information about the official, the issue, and the user's viewpoint, draft a message that effectively communicates the user's concerns and advocates for change.

  Official Name: {{{officialName}}}
  Official Details: {{{officialDetails}}}
  Issue: {{{issue}}}
  Viewpoint: {{{viewpoint}}}

  Message:`,
});

const generateContactMessageFlow = ai.defineFlow(
  {
    name: 'generateContactMessageFlow',
    inputSchema: GenerateContactMessageInputSchema,
    outputSchema: GenerateContactMessageOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
